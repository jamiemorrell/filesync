Start as master or slave

All changes are given a serial number, so if a slave is notified of a change it's not expecting it can request the gap.

Master remembers the last change given to each slave, so  easy to spin up a new slave which syncs all files.

Slaves are IDed not by IP, but by an ENV variable, which will be INSTANCE ID in prod but makes for easy dev.


Master:
- Watches audit log file file changes
- Exposes api to accept notification of new/changed/deleted files
- /api/changes/




Or....
master just broadcasts a new change number when changes occur, packing up add/change/deletes into numbered changes

when slaves see a change has happened greater than the last change number they knew about, they request changes since then

this should enabled new slaves to spin up (asking for changes since change 0), and if a slave misses a change they'll catch up eventually.

GET master/api/changes/:since

POST master/api/file/:path

PUT master/api/file/:path

DELETE master/api/file/:path

Maybe a slave getting a write passes it on to the master.
